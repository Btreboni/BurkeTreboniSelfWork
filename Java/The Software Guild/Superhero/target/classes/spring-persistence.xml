<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/tx 
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"> 

    <!-- Bean definitions go here -->
    <!--    As described earlier, Spring MVC is build on, and makes extensive use of, 
    Spring dependency injection. We want Spring to manage the lifecycle of our 
    DAO implementation so we can inject the DAO into our controllers.  The means 
    we must create a bean definition in our Spring application context files for 
    this implementation of the DAO.-->
    <!--    This also goes in the test-applicationContext.xml in the Other Test Sources!-->


    <!--This allows us to use the transactional annotation, and allows us to wrap
    our methods in transactions.-->
    <tx:annotation-driven />
    
    <!--Now we add the configuration for our data source. As mentioned in the 
    JDBC Template lesson, the data source defines connection pooling, the 
    database driver, and the connection parameters to the database.  All of the 
    library dependencies for database pooling and driver are included in the 
    POM file created by the Software Guild Spring MVC Maven Archetype.-->
    <context:component-scan base-package="com.sg.superhero.dao" />
    <bean id="dataSource"
          class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" 
                  value="jdbc:mysql://localhost:3306/superhero" />
        <property name="username" value="root" />
        <property name="password" value="root" />
        <property name="initialSize" value="5" />
        <property name="maxTotal" value="10" />
    </bean>
    
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- DAO Injection -->
    <bean id="locationDao"
          class="com.sg.superhero.dao.LocationDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <bean id="organizationDao"
          class="com.sg.superhero.dao.OrganizationDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <bean id="sightingDao"
          class="com.sg.superhero.dao.SightingDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <bean id="superDao"
          class="com.sg.superhero.dao.SuperDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <bean id="superOrganizationDao"
          class="com.sg.superhero.dao.SuperOrganizationDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <bean id="superPowerDao"
          class="com.sg.superhero.dao.SuperPowerDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <bean id="superSightingDao"
          class="com.sg.superhero.dao.SuperSightingDaoImpl">
        <constructor-arg ref = "jdbcTemplate"/>
    </bean>
    
    <!-- Service Injection -->
    <bean id ="locationService"
          class="com.sg.superhero.service.LocationServiceImpl">
        <constructor-arg ref = "locationDao"/>
    </bean>
    
    <bean id ="organizationService"
          class="com.sg.superhero.service.OrganizationServiceImpl">
        <constructor-arg ref = "organizationDao"/>
    </bean>
    
    <bean id ="sightingService"
          class="com.sg.superhero.service.SightingServiceImpl">
        <constructor-arg ref = "sightingDao"/>
    </bean>
    
    <bean id ="superOrganizationService"
          class="com.sg.superhero.service.SuperOrganizationServiceImpl">
        <constructor-arg ref = "superOrganizationDao"/>
    </bean>
    
    <bean id ="superPowerService"
          class="com.sg.superhero.service.SuperPowerServiceImpl">
        <constructor-arg ref = "superPowerDao"/>
    </bean>
    
    <bean id ="superService"
          class="com.sg.superhero.service.SuperServiceImpl">
        <constructor-arg ref = "superDao"/>
    </bean>
    
    <bean id ="superSightingService"
          class="com.sg.superhero.service.SuperSightingServiceImpl">
        <constructor-arg ref = "superSightingDao"/>
    </bean>

</beans>

